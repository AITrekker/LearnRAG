services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: learnrag
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./setup:/app/setup:ro
      - ./data/files:/app/internal_files
      - ./cache/models:/app/models_cache
      - ./cache/huggingface:/root/.cache/huggingface
      - ./cache/transformers:/root/.cache/transformers
      - .:/app/output:rw
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    develop:
      watch:
        - action: sync
          path: ./backend/app
          target: /app/app

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - .:/app/output:rw
    depends_on:
      backend:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src

volumes:
  postgres_data:
  models_cache:
  huggingface_cache:
  transformers_cache: